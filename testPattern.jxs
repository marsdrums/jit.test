<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex" type="int" default="0" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="delta_time" type="float" state="DELTA_TIME" />
	<param name="letters" type="int" default="1" />
	<param name="global_time" type="float" state="TIME" />
	<language name="glsl" version="1.5">
		<bind param="tex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="texDim" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="delta_time" program="fp" />
		<bind param="letters" program="fp" />
		<bind param="global_time" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	vec2 uv;
	vec2 normUV;
} jit_out;

uniform mat4 modelViewProjectionMatrix;
uniform mat4 textureMatrix0;
uniform vec2 texDim;

void main(void) {
	gl_Position = modelViewProjectionMatrix*vec4(pos, 1.);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
	vec2 scale = texDim.x >= texDim.y ? vec2(texDim.x/texDim.y, 1) : vec2(1, texDim.y/texDim.x);
	vec2 snorm = uv*2 - 1;
	snorm *= scale;
	snorm *= 0.5;
	snorm += 0.5;
	jit_out.normUV = vec2( snorm.x*0.5 - 0.11, 1 - snorm.y)*vec2(5,1);
}
]]>
</program>
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
#define PI 3.141592653589793238462643383279502884197

in jit_PerVertex {
	vec2 uv;
	vec2 normUV;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform sampler2DRect tex;
uniform vec2 texDim;
uniform float delta_time, global_time;
uniform sampler2D letters;

// Helper function to convert hue to RGB
float hue2rgb(float p, float q, float t) {
    if (t < 0.0) t += 1.0;
    if (t > 1.0) t -= 1.0;
    if (t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;
    if (t < 1.0 / 2.0) return q;
    if (t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;
    return p;
}

vec3 hsl2rgb(float h, float s, float l) {
    float r, g, b;

    if (s == 0.0) {
        // Achromatic color (grey)
        r = g = b = l;
    } else {

        float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;
        float p = 2.0 * l - q;
        r = hue2rgb(p, q, h + 1.0 / 3.0);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1.0 / 3.0);
    }

    return vec3(r, g, b);
}

void add_chessboard(inout vec3 res, in vec2 c){

	c -= texDim*0.5;
	vec2 repetition = c*16/max(texDim.x, texDim.y);
	vec2 k = floor(repetition);
	float chess = mod( ( k.x + k.y ), 2) == 0 ? 0.3 : 0.4;
	k = floor(4*repetition);
	chess += mod( ( k.x + k.y ), 2) == 0 ? 0.0 : 0.04;
	res *= chess;
	float width = 0.994;
	float line = max(0.0, cos(repetition.x*PI*2) - width);
	line = max(line, cos(repetition.y*PI*2) - width);
	line /= 1 - width;
	line = 1 - line;
	res *= line;
}

void add_diagonal(inout vec3 res, in vec2 snorm){

	float diag0 = max(1 - abs(snorm.x - snorm.y)/0.005, 0.0);
	float diag1 = max(1 - abs(snorm.x + snorm.y)/0.005, 0.0);
	res = mix(res, vec3(0,1,1), 0.5 * max(diag0, diag1));
}

void add_circle(inout vec3 res, in float radius){

	float dist = abs(radius - 0.996);
	res = mix( res, vec3(1,1,0), 0.5 * clamp( 1 - dist/0.004, 0.0, 1.1 ) );
}

void add_cross(inout vec3 res, in vec2 snormRatio, in float radius){

	if(radius > 0.05) return;
	res = 	abs(snormRatio.x) > 0.003 && 
			abs(snormRatio.y) > 0.003 ? res : vec3(1,0,0);
}

void add_hue_circle(inout vec3 res, in vec2 snormRatio, in float radius){

	//if(radius < 0.45 || radius > 0.55) return;
	float angle = 0.5*atan(snormRatio.x, snormRatio.y) / PI;
	float angle_time = fract(global_time*0.25) - 0.5;
	vec3 wheel_col = hsl2rgb(angle, 1, 0.5);
	wheel_col = mix(wheel_col*0.2, wheel_col, clamp( min( 1 - abs(angle - angle_time), abs(angle - angle_time))/0.002, 0.0, 1.1 ) );
	float dist = smoothstep(0.0, 1.1, 20*(1 - abs(radius - 0.5)/0.08));
	res = mix(res, wheel_col, dist);
}

void add_rgb_ycm(inout vec3 res, in vec2 snorm, in float radius){

	if(radius >= 0.45 || abs(snorm.y) < 0.2) return;
	float k = floor(0.5*snorm.x*16);

	if(snorm.y < 0){
		res = k == -2 ? vec3(1,0,0) : res;
		res = k == -1 ? vec3(0,1,0) : res;
		res = k == 0 ? vec3(0,0,1) : res;
		res = k == 1 ? vec3(1,1,1) : res;		
	} else {
		res = k == -2 ? vec3(1,1,0) : res;
		res = k == -1 ? vec3(0,1,1) : res;
		res = k == 0 ? vec3(1,0,1) : res;
		res = k == 1 ? vec3(0,0,0) : res;			
	}
}

void add_gradient(inout vec3 res, in vec2 snorm, in float aspectRatio){

	if(abs(snorm.x) > 4.0/16 || abs(snorm.y - 0.6666) > (1.001/16)) return;
	res = vec3(snorm.x / (4.0/16)*0.5 + 0.5);
}

vec2 rotate2D(vec2 p, float c, float s) { return vec2( dot(vec2(c, s), p), dot(vec2(-s, c), p)); }
	
float SDFbox( vec2 p, vec2 b ){
    vec2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}
	
float SDFpie( vec2 p, vec2 c, float r ){
    vec2 q = vec2(abs(p.x), p.y);
    float l = length(q) - r;
    float m = length(q-c*clamp(dot(q,c),0.0,r)); // c=sin/cos of aperture
    return max(l,m*sign(c.y*q.x-c.x*q.y));
}

void add_logo(inout vec3 res, in vec2 p, in float aspectRatio){

	p.y *= -1;
	p *= 8;
	p.x += 1.63;//aspectRatio*0.9;
	p.y -= 0.17;
	vec2 c = vec2(0.7071067812, 0.7071067812);//cos(halfpi*0.5);
	
	float d0 = SDFpie(rotate2D(p, 0.7071067812, -0.7071067812), c, 0.5);
	float d1 = SDFpie(rotate2D(p - vec2(0.5, 0.), -0.7071067812, 0.7071067812) , c, 0.5);
	float d2 = SDFpie(rotate2D(p - vec2(1., 0.5), -0.7071067812, 0.7071067812) , c, 0.5);
	float d3 = SDFpie(rotate2D(p - vec2(1., 0.), 0.7071067812, -0.7071067812) , c, 0.5);
	float d4 = SDFbox(p - vec2(1.25, -0.33), vec2(0.25, 0.17));
	float d5 = SDFpie(rotate2D(p - vec2(1., -0.5), -0.7071067812, -0.7071067812) , c, 0.5);
	float d6 = SDFbox(p - vec2(2, -0.2), vec2(0.25, 0.20));
	float d7 = SDFpie(rotate2D(p - vec2(1.75, -0.), 0.7071067812, -0.7071067812) , c, 0.5);
	float d8 = SDFbox(p - vec2(2.75, -0.25), vec2(0.25, 0.25));
	float d9 = SDFpie(rotate2D(p - vec2(2.5, -0.5), -0.7071067812, -0.7071067812) , c, 0.5);
	float d10 = SDFpie(rotate2D(p - vec2(3, 0.),0.7071067812, 0.7071067812) , c, 0.5);
	
	float d = d0;
	d = min(d, d1);
	d = min(d, d2);
	d = min(d, d3);
	d = min(d, d4);
	d = min(d, d5);
	d = min(d, d6);
	d = min(d, d7);
	d = min(d, d8);
	d = min(d, d9);
	d = min(d, d10);
	res = d < 0 ? mix(res, vec3(0,1,1), 0.5) : res;

}

void add_fps(inout vec3 res, vec2 uv, float pos, float aspectRatio){

	uv.y -= 0.15;
	uv.y *= 30;
	//uv.x -= 0.23*aspectRatio;
	//uv.x *= aspectRatio*3;
	//float limit = 
	if(pos < 1.0 || pos > 6.0) return;
	if(uv.x < 0.0 || uv.y < 0.0 || uv.x >= 1.0 || uv.y >= 1.0) return;
	float fps = 1/delta_time;
	float numPos = mod(floor(fps*10000 / pow(10,pos)), 10);
	uv.x += numPos*0.1;
	//res.r = fract(delta_time) < 0.05 ? 1 : 0;
	res = mix(res, texture(letters, uv).rrr, 0.3);
	res = jit_in.normUV.x < 0.695 || jit_in.normUV.x > 0.705 ? res : vec3(1,0,1);
}

void main(void) {

	bool orient = texDim.x >= texDim.y;
	float aspectRatio = orient ? texDim.x/texDim.y : texDim.y/texDim.x;
	vec2 c = floor(jit_in.uv);
	vec2 modc = floor(mod(c*16, vec2(max(texDim.x, texDim.y))));
	vec2 norm = c / texDim;
	vec2 snorm = norm*2 - 1;
	vec2 scale = orient ? vec2(aspectRatio, 1) : vec2(1, aspectRatio);
	vec2 snormRatio = snorm * scale;
	float radius = length(snormRatio);
	vec2 normUV = vec2(fract(jit_in.normUV.x * 10)/10, jit_in.normUV.y);
	float normPos = 10 - floor(jit_in.normUV.x/0.1);

	vec3 res = vec3(1);

	add_chessboard(res, c);
	add_diagonal(res, snorm);
	add_circle(res, radius);
	add_rgb_ycm(res, snormRatio, radius);
	add_hue_circle(res, snormRatio, radius);
	add_gradient(res, snormRatio, aspectRatio);
	add_logo(res, snormRatio, aspectRatio);
	add_cross(res, snormRatio, radius);
	add_fps(res, normUV, normPos, aspectRatio);

	outColor = vec4(res, 1);
}
]]>
</program>
</language>
</jittershader>
